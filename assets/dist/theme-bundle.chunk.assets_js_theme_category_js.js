"use strict";
(self["webpackChunkbigcommerce_cornerstone"] = self["webpackChunkbigcommerce_cornerstone"] || []).push([["assets_js_theme_category_js"],{

/***/ "./assets/js/theme/category.js":
/*!*************************************!*\
  !*** ./assets/js/theme/category.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Category)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _catalog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./catalog */ "./assets/js/theme/catalog.js");
/* harmony import */ var _global_compare_products__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global/compare-products */ "./assets/js/theme/global/compare-products.js");
/* harmony import */ var _common_faceted_search__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/faceted-search */ "./assets/js/theme/common/faceted-search.js");
/* harmony import */ var _theme_common_utils_translations_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../theme/common/utils/translations-utils */ "./assets/js/theme/common/utils/translations-utils.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./global/modal */ "./assets/js/theme/global/modal.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return { value: void 0, done: !0 }; } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable || "" === iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } throw new TypeError(typeof iterable + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }







var CARTS_ENDPOINT = "/api/storefront/carts/";
var ADDED_TO_CART = "Product(s) added to cart";
function getHeaders() {
  return {
    'Content-Type': 'application/json'
  };
}
function setImageSource(e, attributeName) {
  var card = $(e.currentTarget).find(".card-image");
  var image = card.attr(attributeName);
  card.attr("srcset", image);
}
function fetchCart(route) {
  return fetch(route, {
    method: "GET",
    credentials: "same-origin"
  }).then(function (response) {
    return response.json();
  })["catch"](function (error) {
    return console.error(error);
  });
}
function checkCart() {
  fetchCart(CARTS_ENDPOINT).then(function (result) {
    if (result.length > 0) {
      $('[data-button-type="remove-all"]').css("display", "block");
    } else {
      $('[data-button-type="remove-all"]').css("display", "none");
    }
  })["catch"](function (error) {
    return console.error(error);
  });
}

// Update cart with new line items handling case where product has
function updateCart(_x, _x2) {
  return _updateCart.apply(this, arguments);
}
function _updateCart() {
  _updateCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cart, lineItems) {
    var cartQuantity, allItems, options;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          cartQuantity = 0; // account for all types of items
          allItems = [].concat(cart.lineItems.physicalItems, cart.lineItems.digitalItems, cart.lineItems.customItems, cart.lineItems.giftCertificates); // Calculate cart quantity, for the sake of not making another request we add +1 here. If the quantity is wrong, it will be corrected on the next page load
          allItems.forEach(function (item) {
            cartQuantity += item.quantity + 1;
          });
          options = {
            method: 'POST',
            headers: getHeaders(),
            body: JSON.stringify({
              lineItems: lineItems,
              "locale": "en"
            })
          };
          _context2.next = 6;
          return fetch(CARTS_ENDPOINT + cart.id + '/items', options).then(function (response) {
            if (!response.ok) throw new Error('Failed to update cart');
          }).then(function (response) {
            return _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].hooks.emit('cart-item-add', response);
          });
        case 6:
          $('body').trigger('cart-quantity-update', cartQuantity);
          $('[data-button-type="remove-all"]').css("display", "block");
          (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(ADDED_TO_CART, {
            icon: ''
          });
        case 9:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _updateCart.apply(this, arguments);
}
function createCart(lineItems) {
  var createCartQuantity = lineItems.length;
  var options = {
    method: 'POST',
    headers: getHeaders(),
    body: JSON.stringify({
      lineItems: lineItems
    })
  };
  fetch(CARTS_ENDPOINT, options).then(function (response) {
    if (!response.ok) throw new Error('Failed to create cart');
    return response.json();
  }).then(function (response) {
    return _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].hooks.emit('cart-item-add', response);
  });
  $('[data-button-type="remove-all"]').css("display", "block");
  $('body').trigger('cart-quantity-update', createCartQuantity);
  (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(ADDED_TO_CART, {
    icon: ''
  });
}
var Category = /*#__PURE__*/function (_CatalogPage) {
  _inheritsLoose(Category, _CatalogPage);
  function Category(context) {
    var _this;
    _this = _CatalogPage.call(this, context) || this;
    _this.validationDictionary = (0,_theme_common_utils_translations_utils__WEBPACK_IMPORTED_MODULE_4__.createTranslationDictionary)(context);
    return _this;
  }
  var _proto = Category.prototype;
  _proto.bindEvents = function bindEvents() {
    $(".card-figure").on({
      mouseenter: this.onMouseEnter.bind(this),
      mouseleave: this.onMouseLeave.bind(this)
    });
    $('[data-button-type="add-all"]').on("click", this.addAllToCart.bind(this));
    $('[data-button-type="remove-all"]').on("click", this.deleteCart.bind(this));
  };
  _proto.setLiveRegionAttributes = function setLiveRegionAttributes($element, roleType, ariaLiveStatus) {
    $element.attr({
      role: roleType,
      'aria-live': ariaLiveStatus
    });
  };
  _proto.makeShopByPriceFilterAccessible = function makeShopByPriceFilterAccessible() {
    var _this2 = this;
    if (!$('[data-shop-by-price]').length) return;
    if ($('.navList-action').hasClass('is-active')) {
      $('a.navList-action.is-active').focus();
    }
    $('a.navList-action').on('click', function () {
      return _this2.setLiveRegionAttributes($('span.price-filter-message'), 'status', 'assertive');
    });
  };
  _proto.onMouseEnter = function onMouseEnter(e) {
    setImageSource(e, "data-hover-image");
  };
  _proto.onMouseLeave = function onMouseLeave(e) {
    setImageSource(e, "data-src");
  };
  _proto.addAllToCart = /*#__PURE__*/function () {
    var _addAllToCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
      var cart, lineItems;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            _context.prev = 1;
            _context.next = 4;
            return fetch(CARTS_ENDPOINT).then(function (response) {
              return response.json();
            });
          case 4:
            cart = _context.sent;
            // Filter products without options and map them to lineItems
            // Handling case where a product has options a better way would be to prompt the user to select the options
            lineItems = this.context.categoryProducts.filter(function (product) {
              return !product.has_options;
            }).map(function (product) {
              return {
                productId: product.id,
                quantity: product.qty_in_cart + 1
              };
            }); // Check if there is an existing cart or a new one needs to be created
            if (!(cart.length > 0)) {
              _context.next = 11;
              break;
            }
            _context.next = 9;
            return updateCart(cart[0], lineItems);
          case 9:
            _context.next = 13;
            break;
          case 11:
            _context.next = 13;
            return createCart(lineItems);
          case 13:
            _context.next = 18;
            break;
          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](1);
            console.error("error", _context.t0);
          case 18:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[1, 15]]);
    }));
    function addAllToCart(_x3) {
      return _addAllToCart.apply(this, arguments);
    }
    return addAllToCart;
  }();
  _proto.deleteCart = function deleteCart(event) {
    event.preventDefault();
    var string = "Are you sure you want to delete your cart?";
    return (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(string, {
      // Make sure to return the entire chain
      icon: 'warning',
      showCancelButton: true,
      onConfirm: function onConfirm() {
        return fetchCart(CARTS_ENDPOINT).then(function (result) {
          var cartId = result[0].id;
          return fetch(CARTS_ENDPOINT + cartId, {
            method: "DELETE",
            credentials: "same-origin"
          }).then(function (response) {
            _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].hooks.emit('cart-item-remove', response);
            if (response.ok) {
              $('[data-button-type="remove-all"]').css("display", "none");
              $('body').trigger('cart-quantity-update', 0); // Triggering the event directly
            } else {
              return (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(response.data.errors.join('\n'));
            }
          });
        })["catch"](function (error) {
          return console.error(error);
        });
      }
    });
  };
  _proto.onReady = function onReady() {
    var _this3 = this;
    this.arrangeFocusOnSortBy();
    this.makeShopByPriceFilterAccessible();
    (0,_global_compare_products__WEBPACK_IMPORTED_MODULE_2__["default"])(this.context);
    if ($('#facetedSearch').length > 0) {
      this.initFacetedSearch();
    } else {
      this.onSortBySubmit = this.onSortBySubmit.bind(this);
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__.hooks.on('sortBy-submitted', this.onSortBySubmit);
    }
    $('a.reset-btn').on('click', function () {
      return _this3.setLiveRegionsAttributes($('span.reset-message'), 'status', 'polite');
    });
    this.bindEvents();
    checkCart();
    this.ariaNotifyNoProducts();
  };
  _proto.ariaNotifyNoProducts = function ariaNotifyNoProducts() {
    var $noProductsMessage = $('[data-no-products-notification]');
    if ($noProductsMessage.length) {
      $noProductsMessage.focus();
    }
  };
  _proto.initFacetedSearch = function initFacetedSearch() {
    var _this$validationDicti = this.validationDictionary,
      onMinPriceError = _this$validationDicti.price_min_evaluation,
      onMaxPriceError = _this$validationDicti.price_max_evaluation,
      minPriceNotEntered = _this$validationDicti.price_min_not_entered,
      maxPriceNotEntered = _this$validationDicti.price_max_not_entered,
      onInvalidPrice = _this$validationDicti.price_invalid_value;
    var $productListingContainer = $('#product-listing-container');
    var $facetedSearchContainer = $('#faceted-search-container');
    var productsPerPage = this.context.categoryProductsPerPage;
    var requestOptions = {
      config: {
        category: {
          shop_by_price: true,
          products: {
            limit: productsPerPage
          }
        }
      },
      template: {
        productListing: 'category/product-listing',
        sidebar: 'category/sidebar'
      },
      showMore: 'category/show-more'
    };
    this.facetedSearch = new _common_faceted_search__WEBPACK_IMPORTED_MODULE_3__["default"](requestOptions, function (content) {
      $productListingContainer.html(content.productListing);
      $facetedSearchContainer.html(content.sidebar);
      $('body').triggerHandler('compareReset');
      $('html, body').animate({
        scrollTop: 0
      }, 100);
    }, {
      validationErrorMessages: {
        onMinPriceError: onMinPriceError,
        onMaxPriceError: onMaxPriceError,
        minPriceNotEntered: minPriceNotEntered,
        maxPriceNotEntered: maxPriceNotEntered,
        onInvalidPrice: onInvalidPrice
      }
    });
  };
  return Category;
}(_catalog__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "./assets/js/theme/common/utils/translations-utils.js":
/*!************************************************************!*\
  !*** ./assets/js/theme/common/utils/translations-utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTranslationDictionary: () => (/* binding */ createTranslationDictionary)
/* harmony export */ });
var TRANSLATIONS = 'translations';
var isTranslationDictionaryNotEmpty = function isTranslationDictionaryNotEmpty(dictionary) {
  return !!Object.keys(dictionary[TRANSLATIONS]).length;
};
var chooseActiveDictionary = function chooseActiveDictionary() {
  for (var i = 0; i < arguments.length; i++) {
    var dictionary = JSON.parse(i < 0 || arguments.length <= i ? undefined : arguments[i]);
    if (isTranslationDictionaryNotEmpty(dictionary)) {
      return dictionary;
    }
  }
};

/**
 * defines Translation Dictionary to use
 * @param context provides access to 3 validation JSONs from en.json:
 * validation_messages, validation_fallback_messages and default_messages
 * @returns {Object}
 */
var createTranslationDictionary = function createTranslationDictionary(context) {
  var validationDictionaryJSON = context.validationDictionaryJSON,
    validationFallbackDictionaryJSON = context.validationFallbackDictionaryJSON,
    validationDefaultDictionaryJSON = context.validationDefaultDictionaryJSON;
  var activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);
  var localizations = Object.values(activeDictionary[TRANSLATIONS]);
  var translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(function (key) {
    return key.split('.').pop();
  });
  return translationKeys.reduce(function (acc, key, i) {
    acc[key] = localizations[i];
    return acc;
  }, {});
};

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtYnVuZGxlLmNodW5rLmFzc2V0c19qc190aGVtZV9jYXRlZ29yeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FDQSxxSkFBQUEsbUJBQUEsWUFBQUEsb0JBQUEsV0FBQUMsT0FBQSxTQUFBQSxPQUFBLE9BQUFDLEVBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLE1BQUEsR0FBQUgsRUFBQSxDQUFBSSxjQUFBLEVBQUFDLGNBQUEsR0FBQUosTUFBQSxDQUFBSSxjQUFBLGNBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxJQUFBLElBQUFGLEdBQUEsQ0FBQUMsR0FBQSxJQUFBQyxJQUFBLENBQUFDLEtBQUEsS0FBQUMsT0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLGNBQUEsR0FBQUYsT0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxtQkFBQSxHQUFBSixPQUFBLENBQUFLLGFBQUEsdUJBQUFDLGlCQUFBLEdBQUFOLE9BQUEsQ0FBQU8sV0FBQSw4QkFBQUMsT0FBQVosR0FBQSxFQUFBQyxHQUFBLEVBQUFFLEtBQUEsV0FBQVIsTUFBQSxDQUFBSSxjQUFBLENBQUFDLEdBQUEsRUFBQUMsR0FBQSxJQUFBRSxLQUFBLEVBQUFBLEtBQUEsRUFBQVUsVUFBQSxNQUFBQyxZQUFBLE1BQUFDLFFBQUEsU0FBQWYsR0FBQSxDQUFBQyxHQUFBLFdBQUFXLE1BQUEsbUJBQUFJLEdBQUEsSUFBQUosTUFBQSxZQUFBQSxPQUFBWixHQUFBLEVBQUFDLEdBQUEsRUFBQUUsS0FBQSxXQUFBSCxHQUFBLENBQUFDLEdBQUEsSUFBQUUsS0FBQSxnQkFBQWMsS0FBQUMsT0FBQSxFQUFBQyxPQUFBLEVBQUFDLElBQUEsRUFBQUMsV0FBQSxRQUFBQyxjQUFBLEdBQUFILE9BQUEsSUFBQUEsT0FBQSxDQUFBdkIsU0FBQSxZQUFBMkIsU0FBQSxHQUFBSixPQUFBLEdBQUFJLFNBQUEsRUFBQUMsU0FBQSxHQUFBN0IsTUFBQSxDQUFBOEIsTUFB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Q0FBQyxDQUFDckQsR0FBRyxDQUFDLFVBQUE1TyxHQUFHO0lBQUEsT0FBSUEsR0FBRyxDQUFDNFMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOUwsR0FBRyxDQUFDLENBQUM7RUFBQSxFQUFDO0VBRXBHLE9BQU82TCxlQUFlLENBQUNFLE1BQU0sQ0FBQyxVQUFDQyxHQUFHLEVBQUU5UyxHQUFHLEVBQUU0RixDQUFDLEVBQUs7SUFDM0NrTixHQUFHLENBQUM5UyxHQUFHLENBQUMsR0FBRzBTLGFBQWEsQ0FBQzlNLENBQUMsQ0FBQztJQUMzQixPQUFPa04sR0FBRztFQUNkLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNWLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1jb3JuZXJzdG9uZS8uL2Fzc2V0cy9qcy90aGVtZS9jYXRlZ29yeS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1jb3JuZXJzdG9uZS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vdXRpbHMvdHJhbnNsYXRpb25zLXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBob29rc1xyXG59IGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcclxuaW1wb3J0IENhdGFsb2dQYWdlIGZyb20gJy4vY2F0YWxvZyc7XHJcbmltcG9ydCBjb21wYXJlUHJvZHVjdHMgZnJvbSAnLi9nbG9iYWwvY29tcGFyZS1wcm9kdWN0cyc7XHJcbmltcG9ydCBGYWNldGVkU2VhcmNoIGZyb20gJy4vY29tbW9uL2ZhY2V0ZWQtc2VhcmNoJztcclxuaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcclxuaW1wb3J0IHtcclxuICAgIGNyZWF0ZVRyYW5zbGF0aW9uRGljdGlvbmFyeVxyXG59IGZyb20gJy4uL3RoZW1lL2NvbW1vbi91dGlscy90cmFuc2xhdGlvbnMtdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gICAgc2hvd0FsZXJ0TW9kYWwsIGRlZmF1bHRNb2RhbFxyXG59IGZyb20gJy4vZ2xvYmFsL21vZGFsJztcclxuXHJcbmNvbnN0IENBUlRTX0VORFBPSU5UID0gXCIvYXBpL3N0b3JlZnJvbnQvY2FydHMvXCI7XHJcbmNvbnN0IEFEREVEX1RPX0NBUlQgPSBcIlByb2R1Y3QocykgYWRkZWQgdG8gY2FydFwiO1xyXG5cclxuZnVuY3Rpb24gZ2V0SGVhZGVycygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEltYWdlU291cmNlKGUsIGF0dHJpYnV0ZU5hbWUpIHtcclxuICAgIGNvbnN0IGNhcmQgPSAkKGUuY3VycmVudFRhcmdldCkuZmluZChcIi5jYXJkLWltYWdlXCIpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBjYXJkLmF0dHIoYXR0cmlidXRlTmFtZSk7XHJcbiAgICBjYXJkLmF0dHIoXCJzcmNzZXRcIiwgaW1hZ2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmZXRjaENhcnQocm91dGUpIHtcclxuICAgIHJldHVybiBmZXRjaChyb3V0ZSwge1xyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0NhcnQoKSB7XHJcbiAgICBmZXRjaENhcnQoQ0FSVFNfRU5EUE9JTlQpXHJcbiAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLWJ1dHRvbi10eXBlPVwicmVtb3ZlLWFsbFwiXScpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLWJ1dHRvbi10eXBlPVwicmVtb3ZlLWFsbFwiXScpLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG59XHJcblxyXG4vLyBVcGRhdGUgY2FydCB3aXRoIG5ldyBsaW5lIGl0ZW1zIGhhbmRsaW5nIGNhc2Ugd2hlcmUgcHJvZHVjdCBoYXNcclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlQ2FydChjYXJ0LCBsaW5lSXRlbXMpIHtcclxuICAgIGxldCBjYXJ0UXVhbnRpdHkgPSAwO1xyXG4gICAgLy8gYWNjb3VudCBmb3IgYWxsIHR5cGVzIG9mIGl0ZW1zXHJcbiAgICBjb25zdCBhbGxJdGVtcyA9IFsuLi5jYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLCAuLi5jYXJ0LmxpbmVJdGVtcy5kaWdpdGFsSXRlbXMsIC4uLmNhcnQubGluZUl0ZW1zLmN1c3RvbUl0ZW1zLCAuLi5jYXJ0LmxpbmVJdGVtcy5naWZ0Q2VydGlmaWNhdGVzXTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgY2FydCBxdWFudGl0eSwgZm9yIHRoZSBzYWtlIG9mIG5vdCBtYWtpbmcgYW5vdGhlciByZXF1ZXN0IHdlIGFkZCArMSBoZXJlLiBJZiB0aGUgcXVhbnRpdHkgaXMgd3JvbmcsIGl0IHdpbGwgYmUgY29ycmVjdGVkIG9uIHRoZSBuZXh0IHBhZ2UgbG9hZFxyXG4gICAgYWxsSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBjYXJ0UXVhbnRpdHkgKz0gaXRlbS5xdWFudGl0eSArIDE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IGdldEhlYWRlcnMoKSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7ICBcclxuICAgICAgICAgICAgbGluZUl0ZW1zLFxyXG4gICAgICAgICAgICBcImxvY2FsZVwiOiBcImVuXCJcclxuICAgICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICBhd2FpdCBmZXRjaChDQVJUU19FTkRQT0lOVCArIGNhcnQuaWQgKyAnL2l0ZW1zJywgb3B0aW9ucylcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBjYXJ0Jyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB1dGlscy5ob29rcy5lbWl0KCdjYXJ0LWl0ZW0tYWRkJywgcmVzcG9uc2UpKTtcclxuXHJcbiAgICAkKCdib2R5JykudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBjYXJ0UXVhbnRpdHkpO1xyXG4gICAgJCgnW2RhdGEtYnV0dG9uLXR5cGU9XCJyZW1vdmUtYWxsXCJdJykuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG5cclxuc2hvd0FsZXJ0TW9kYWwoQURERURfVE9fQ0FSVCwge1xyXG4gICAgaWNvbjogJycsXHJcbn0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ2FydChsaW5lSXRlbXMpIHtcclxuICAgIGNvbnN0IGNyZWF0ZUNhcnRRdWFudGl0eSA9IGxpbmVJdGVtcy5sZW5ndGg7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IGdldEhlYWRlcnMoKSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGxpbmVJdGVtc1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIGZldGNoKENBUlRTX0VORFBPSU5ULCBvcHRpb25zKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGNhcnQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHV0aWxzLmhvb2tzLmVtaXQoJ2NhcnQtaXRlbS1hZGQnLCByZXNwb25zZSkpO1xyXG4gICAgJCgnW2RhdGEtYnV0dG9uLXR5cGU9XCJyZW1vdmUtYWxsXCJdJykuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG4gICAgJCgnYm9keScpLnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgY3JlYXRlQ2FydFF1YW50aXR5KTtcclxuICAgIHNob3dBbGVydE1vZGFsKEFEREVEX1RPX0NBUlQsIHtcclxuICAgIGljb246ICcnLFxyXG59KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhdGVnb3J5IGV4dGVuZHMgQ2F0YWxvZ1BhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGlvbkRpY3Rpb25hcnkgPSBjcmVhdGVUcmFuc2xhdGlvbkRpY3Rpb25hcnkoY29udGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEV2ZW50cygpIHtcclxuICAgICAgICAkKFwiLmNhcmQtZmlndXJlXCIpLm9uKHtcclxuICAgICAgICAgICAgbW91c2VlbnRlcjogdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgbW91c2VsZWF2ZTogdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJ1tkYXRhLWJ1dHRvbi10eXBlPVwiYWRkLWFsbFwiXScpLm9uKFwiY2xpY2tcIiwgdGhpcy5hZGRBbGxUb0NhcnQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgJCgnW2RhdGEtYnV0dG9uLXR5cGU9XCJyZW1vdmUtYWxsXCJdJykub24oXCJjbGlja1wiLCB0aGlzLmRlbGV0ZUNhcnQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgc2V0TGl2ZVJlZ2lvbkF0dHJpYnV0ZXMoJGVsZW1lbnQsIHJvbGVUeXBlLCBhcmlhTGl2ZVN0YXR1cykge1xyXG4gICAgICAgICRlbGVtZW50LmF0dHIoe1xyXG4gICAgICAgICAgICByb2xlOiByb2xlVHlwZSxcclxuICAgICAgICAgICAgJ2FyaWEtbGl2ZSc6IGFyaWFMaXZlU3RhdHVzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1ha2VTaG9wQnlQcmljZUZpbHRlckFjY2Vzc2libGUoKSB7XHJcbiAgICAgICAgaWYgKCEkKCdbZGF0YS1zaG9wLWJ5LXByaWNlXScpLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoJCgnLm5hdkxpc3QtYWN0aW9uJykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICQoJ2EubmF2TGlzdC1hY3Rpb24uaXMtYWN0aXZlJykuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnYS5uYXZMaXN0LWFjdGlvbicpLm9uKCdjbGljaycsICgpID0+IHRoaXMuc2V0TGl2ZVJlZ2lvbkF0dHJpYnV0ZXMoJCgnc3Bhbi5wcmljZS1maWx0ZXItbWVzc2FnZScpLCAnc3RhdHVzJywgJ2Fzc2VydGl2ZScpKTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRW50ZXIoZSkge1xyXG4gICAgICAgIHNldEltYWdlU291cmNlKGUsIFwiZGF0YS1ob3Zlci1pbWFnZVwiKTtcclxuICAgIH1cclxuICAgIG9uTW91c2VMZWF2ZShlKSB7XHJcbiAgICAgICAgc2V0SW1hZ2VTb3VyY2UoZSwgXCJkYXRhLXNyY1wiKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgYWRkQWxsVG9DYXJ0KGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBGZXRjaCBjYXJ0XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBhd2FpdCBmZXRjaChDQVJUU19FTkRQT0lOVCkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gRmlsdGVyIHByb2R1Y3RzIHdpdGhvdXQgb3B0aW9ucyBhbmQgbWFwIHRoZW0gdG8gbGluZUl0ZW1zXHJcbiAgICAgICAgICAgIC8vIEhhbmRsaW5nIGNhc2Ugd2hlcmUgYSBwcm9kdWN0IGhhcyBvcHRpb25zIGEgYmV0dGVyIHdheSB3b3VsZCBiZSB0byBwcm9tcHQgdGhlIHVzZXIgdG8gc2VsZWN0IHRoZSBvcHRpb25zXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVJdGVtcyA9IHRoaXMuY29udGV4dC5jYXRlZ29yeVByb2R1Y3RzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHByb2R1Y3QgPT4gIXByb2R1Y3QuaGFzX29wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAubWFwKHByb2R1Y3QgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IHByb2R1Y3QuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHByb2R1Y3QucXR5X2luX2NhcnQgKyAxXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhbiBleGlzdGluZyBjYXJ0IG9yIGEgbmV3IG9uZSBuZWVkcyB0byBiZSBjcmVhdGVkXHJcbiAgICAgICAgICAgIGlmIChjYXJ0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZUNhcnQoY2FydFswXSwgbGluZUl0ZW1zKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgY3JlYXRlQ2FydChsaW5lSXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImVycm9yXCIsIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNhcnQoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciBzdHJpbmcgPSBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgeW91ciBjYXJ0P1wiO1xyXG4gICAgICAgIHJldHVybiBzaG93QWxlcnRNb2RhbChzdHJpbmcsIHsgLy8gTWFrZSBzdXJlIHRvIHJldHVybiB0aGUgZW50aXJlIGNoYWluXHJcbiAgICAgICAgICAgIGljb246ICd3YXJuaW5nJyxcclxuICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgb25Db25maXJtOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hDYXJ0KENBUlRTX0VORFBPSU5UKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FydElkID0gcmVzdWx0WzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goQ0FSVFNfRU5EUE9JTlQgKyBjYXJ0SWQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuaG9va3MuZW1pdCgnY2FydC1pdGVtLXJlbW92ZScsIHJlc3BvbnNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCdbZGF0YS1idXR0b24tdHlwZT1cInJlbW92ZS1hbGxcIl0nKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgMCk7IC8vIFRyaWdnZXJpbmcgdGhlIGV2ZW50IGRpcmVjdGx5XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93QWxlcnRNb2RhbChyZXNwb25zZS5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZWFkeSgpIHtcclxuICAgICAgICB0aGlzLmFycmFuZ2VGb2N1c09uU29ydEJ5KCk7XHJcbiAgICAgICAgdGhpcy5tYWtlU2hvcEJ5UHJpY2VGaWx0ZXJBY2Nlc3NpYmxlKCk7XHJcblxyXG4gICAgICAgIGNvbXBhcmVQcm9kdWN0cyh0aGlzLmNvbnRleHQpO1xyXG5cclxuICAgICAgICBpZiAoJCgnI2ZhY2V0ZWRTZWFyY2gnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEZhY2V0ZWRTZWFyY2goKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uU29ydEJ5U3VibWl0ID0gdGhpcy5vblNvcnRCeVN1Ym1pdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBob29rcy5vbignc29ydEJ5LXN1Ym1pdHRlZCcsIHRoaXMub25Tb3J0QnlTdWJtaXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnYS5yZXNldC1idG4nKS5vbignY2xpY2snLCAoKSA9PiB0aGlzLnNldExpdmVSZWdpb25zQXR0cmlidXRlcygkKCdzcGFuLnJlc2V0LW1lc3NhZ2UnKSwgJ3N0YXR1cycsICdwb2xpdGUnKSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgICAgICBjaGVja0NhcnQoKTtcclxuICAgICAgICB0aGlzLmFyaWFOb3RpZnlOb1Byb2R1Y3RzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXJpYU5vdGlmeU5vUHJvZHVjdHMoKSB7XHJcbiAgICAgICAgY29uc3QgJG5vUHJvZHVjdHNNZXNzYWdlID0gJCgnW2RhdGEtbm8tcHJvZHVjdHMtbm90aWZpY2F0aW9uXScpO1xyXG4gICAgICAgIGlmICgkbm9Qcm9kdWN0c01lc3NhZ2UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICRub1Byb2R1Y3RzTWVzc2FnZS5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0RmFjZXRlZFNlYXJjaCgpIHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIHByaWNlX21pbl9ldmFsdWF0aW9uOiBvbk1pblByaWNlRXJyb3IsXHJcbiAgICAgICAgICAgIHByaWNlX21heF9ldmFsdWF0aW9uOiBvbk1heFByaWNlRXJyb3IsXHJcbiAgICAgICAgICAgIHByaWNlX21pbl9ub3RfZW50ZXJlZDogbWluUHJpY2VOb3RFbnRlcmVkLFxyXG4gICAgICAgICAgICBwcmljZV9tYXhfbm90X2VudGVyZWQ6IG1heFByaWNlTm90RW50ZXJlZCxcclxuICAgICAgICAgICAgcHJpY2VfaW52YWxpZF92YWx1ZTogb25JbnZhbGlkUHJpY2UsXHJcbiAgICAgICAgfSA9IHRoaXMudmFsaWRhdGlvbkRpY3Rpb25hcnk7XHJcbiAgICAgICAgY29uc3QgJHByb2R1Y3RMaXN0aW5nQ29udGFpbmVyID0gJCgnI3Byb2R1Y3QtbGlzdGluZy1jb250YWluZXInKTtcclxuICAgICAgICBjb25zdCAkZmFjZXRlZFNlYXJjaENvbnRhaW5lciA9ICQoJyNmYWNldGVkLXNlYXJjaC1jb250YWluZXInKTtcclxuICAgICAgICBjb25zdCBwcm9kdWN0c1BlclBhZ2UgPSB0aGlzLmNvbnRleHQuY2F0ZWdvcnlQcm9kdWN0c1BlclBhZ2U7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG9wX2J5X3ByaWNlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0OiBwcm9kdWN0c1BlclBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiB7XHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0TGlzdGluZzogJ2NhdGVnb3J5L3Byb2R1Y3QtbGlzdGluZycsXHJcbiAgICAgICAgICAgICAgICBzaWRlYmFyOiAnY2F0ZWdvcnkvc2lkZWJhcicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNob3dNb3JlOiAnY2F0ZWdvcnkvc2hvdy1tb3JlJyxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmZhY2V0ZWRTZWFyY2ggPSBuZXcgRmFjZXRlZFNlYXJjaChyZXF1ZXN0T3B0aW9ucywgKGNvbnRlbnQpID0+IHtcclxuICAgICAgICAgICAgJHByb2R1Y3RMaXN0aW5nQ29udGFpbmVyLmh0bWwoY29udGVudC5wcm9kdWN0TGlzdGluZyk7XHJcbiAgICAgICAgICAgICRmYWNldGVkU2VhcmNoQ29udGFpbmVyLmh0bWwoY29udGVudC5zaWRlYmFyKTtcclxuXHJcbiAgICAgICAgICAgICQoJ2JvZHknKS50cmlnZ2VySGFuZGxlcignY29tcGFyZVJlc2V0Jyk7XHJcblxyXG4gICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IDAsXHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3JNZXNzYWdlczoge1xyXG4gICAgICAgICAgICAgICAgb25NaW5QcmljZUVycm9yLFxyXG4gICAgICAgICAgICAgICAgb25NYXhQcmljZUVycm9yLFxyXG4gICAgICAgICAgICAgICAgbWluUHJpY2VOb3RFbnRlcmVkLFxyXG4gICAgICAgICAgICAgICAgbWF4UHJpY2VOb3RFbnRlcmVkLFxyXG4gICAgICAgICAgICAgICAgb25JbnZhbGlkUHJpY2UsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJjb25zdCBUUkFOU0xBVElPTlMgPSAndHJhbnNsYXRpb25zJztcbmNvbnN0IGlzVHJhbnNsYXRpb25EaWN0aW9uYXJ5Tm90RW1wdHkgPSAoZGljdGlvbmFyeSkgPT4gISFPYmplY3Qua2V5cyhkaWN0aW9uYXJ5W1RSQU5TTEFUSU9OU10pLmxlbmd0aDtcbmNvbnN0IGNob29zZUFjdGl2ZURpY3Rpb25hcnkgPSAoLi4uZGljdGlvbmFyeUpzb25MaXN0KSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWN0aW9uYXJ5SnNvbkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGljdGlvbmFyeSA9IEpTT04ucGFyc2UoZGljdGlvbmFyeUpzb25MaXN0W2ldKTtcbiAgICAgICAgaWYgKGlzVHJhbnNsYXRpb25EaWN0aW9uYXJ5Tm90RW1wdHkoZGljdGlvbmFyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWN0aW9uYXJ5O1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBkZWZpbmVzIFRyYW5zbGF0aW9uIERpY3Rpb25hcnkgdG8gdXNlXG4gKiBAcGFyYW0gY29udGV4dCBwcm92aWRlcyBhY2Nlc3MgdG8gMyB2YWxpZGF0aW9uIEpTT05zIGZyb20gZW4uanNvbjpcbiAqIHZhbGlkYXRpb25fbWVzc2FnZXMsIHZhbGlkYXRpb25fZmFsbGJhY2tfbWVzc2FnZXMgYW5kIGRlZmF1bHRfbWVzc2FnZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUcmFuc2xhdGlvbkRpY3Rpb25hcnkgPSAoY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHsgdmFsaWRhdGlvbkRpY3Rpb25hcnlKU09OLCB2YWxpZGF0aW9uRmFsbGJhY2tEaWN0aW9uYXJ5SlNPTiwgdmFsaWRhdGlvbkRlZmF1bHREaWN0aW9uYXJ5SlNPTiB9ID0gY29udGV4dDtcbiAgICBjb25zdCBhY3RpdmVEaWN0aW9uYXJ5ID0gY2hvb3NlQWN0aXZlRGljdGlvbmFyeSh2YWxpZGF0aW9uRGljdGlvbmFyeUpTT04sIHZhbGlkYXRpb25GYWxsYmFja0RpY3Rpb25hcnlKU09OLCB2YWxpZGF0aW9uRGVmYXVsdERpY3Rpb25hcnlKU09OKTtcbiAgICBjb25zdCBsb2NhbGl6YXRpb25zID0gT2JqZWN0LnZhbHVlcyhhY3RpdmVEaWN0aW9uYXJ5W1RSQU5TTEFUSU9OU10pO1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGl2ZURpY3Rpb25hcnlbVFJBTlNMQVRJT05TXSkubWFwKGtleSA9PiBrZXkuc3BsaXQoJy4nKS5wb3AoKSk7XG5cbiAgICByZXR1cm4gdHJhbnNsYXRpb25LZXlzLnJlZHVjZSgoYWNjLCBrZXksIGkpID0+IHtcbiAgICAgICAgYWNjW2tleV0gPSBsb2NhbGl6YXRpb25zW2ldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG4iXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJkZXNjIiwidmFsdWUiLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwic3RhdGUiLCJFcnJvciIsImRvbmUiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwibWV0aG9kTmFtZSIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsInZhbCIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwicCIsImJpbmQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiaG9va3MiLCJDYXRhbG9nUGFnZSIsImNvbXBhcmVQcm9kdWN0cyIsIkZhY2V0ZWRTZWFyY2giLCJ1dGlscyIsImNyZWF0ZVRyYW5zbGF0aW9uRGljdGlvbmFyeSIsInNob3dBbGVydE1vZGFsIiwiZGVmYXVsdE1vZGFsIiwiQ0FSVFNfRU5EUE9JTlQiLCJBRERFRF9UT19DQVJUIiwiZ2V0SGVhZGVycyIsInNldEltYWdlU291cmNlIiwiZSIsImF0dHJpYnV0ZU5hbWUiLCJjYXJkIiwiJCIsImN1cnJlbnRUYXJnZXQiLCJmaW5kIiwiaW1hZ2UiLCJhdHRyIiwiZmV0Y2hDYXJ0Iiwicm91dGUiLCJmZXRjaCIsImNyZWRlbnRpYWxzIiwicmVzcG9uc2UiLCJqc29uIiwiY29uc29sZSIsImNoZWNrQ2FydCIsImNzcyIsInVwZGF0ZUNhcnQiLCJfeCIsIl94MiIsIl91cGRhdGVDYXJ0IiwiX2NhbGxlZTIiLCJjYXJ0IiwibGluZUl0ZW1zIiwiY2FydFF1YW50aXR5IiwiYWxsSXRlbXMiLCJvcHRpb25zIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwiY29uY2F0IiwicGh5c2ljYWxJdGVtcyIsImRpZ2l0YWxJdGVtcyIsImN1c3RvbUl0ZW1zIiwiZ2lmdENlcnRpZmljYXRlcyIsIml0ZW0iLCJxdWFudGl0eSIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImlkIiwib2siLCJlbWl0IiwidHJpZ2dlciIsImljb24iLCJjcmVhdGVDYXJ0IiwiY3JlYXRlQ2FydFF1YW50aXR5IiwiQ2F0ZWdvcnkiLCJfQ2F0YWxvZ1BhZ2UiLCJfdGhpcyIsInZhbGlkYXRpb25EaWN0aW9uYXJ5IiwiX3Byb3RvIiwiYmluZEV2ZW50cyIsIm9uIiwibW91c2VlbnRlciIsIm9uTW91c2VFbnRlciIsIm1vdXNlbGVhdmUiLCJvbk1vdXNlTGVhdmUiLCJhZGRBbGxUb0NhcnQiLCJkZWxldGVDYXJ0Iiwic2V0TGl2ZVJlZ2lvbkF0dHJpYnV0ZXMiLCIkZWxlbWVudCIsInJvbGVUeXBlIiwiYXJpYUxpdmVTdGF0dXMiLCJyb2xlIiwibWFrZVNob3BCeVByaWNlRmlsdGVyQWNjZXNzaWJsZSIsIl90aGlzMiIsImhhc0NsYXNzIiwiZm9jdXMiLCJfYWRkQWxsVG9DYXJ0IiwiX2NhbGxlZSIsImV2ZW50IiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXZlbnREZWZhdWx0IiwiY2F0ZWdvcnlQcm9kdWN0cyIsImZpbHRlciIsInByb2R1Y3QiLCJoYXNfb3B0aW9ucyIsIm1hcCIsInByb2R1Y3RJZCIsInF0eV9pbl9jYXJ0IiwidDAiLCJfeDMiLCJzdHJpbmciLCJzaG93Q2FuY2VsQnV0dG9uIiwib25Db25maXJtIiwiY2FydElkIiwiZGF0YSIsImVycm9ycyIsImpvaW4iLCJvblJlYWR5IiwiX3RoaXMzIiwiYXJyYW5nZUZvY3VzT25Tb3J0QnkiLCJpbml0RmFjZXRlZFNlYXJjaCIsIm9uU29ydEJ5U3VibWl0Iiwic2V0TGl2ZVJlZ2lvbnNBdHRyaWJ1dGVzIiwiYXJpYU5vdGlmeU5vUHJvZHVjdHMiLCIkbm9Qcm9kdWN0c01lc3NhZ2UiLCJfdGhpcyR2YWxpZGF0aW9uRGljdGkiLCJvbk1pblByaWNlRXJyb3IiLCJwcmljZV9taW5fZXZhbHVhdGlvbiIsIm9uTWF4UHJpY2VFcnJvciIsInByaWNlX21heF9ldmFsdWF0aW9uIiwibWluUHJpY2VOb3RFbnRlcmVkIiwicHJpY2VfbWluX25vdF9lbnRlcmVkIiwibWF4UHJpY2VOb3RFbnRlcmVkIiwicHJpY2VfbWF4X25vdF9lbnRlcmVkIiwib25JbnZhbGlkUHJpY2UiLCJwcmljZV9pbnZhbGlkX3ZhbHVlIiwiJHByb2R1Y3RMaXN0aW5nQ29udGFpbmVyIiwiJGZhY2V0ZWRTZWFyY2hDb250YWluZXIiLCJwcm9kdWN0c1BlclBhZ2UiLCJjYXRlZ29yeVByb2R1Y3RzUGVyUGFnZSIsInJlcXVlc3RPcHRpb25zIiwiY29uZmlnIiwiY2F0ZWdvcnkiLCJzaG9wX2J5X3ByaWNlIiwicHJvZHVjdHMiLCJsaW1pdCIsInRlbXBsYXRlIiwicHJvZHVjdExpc3RpbmciLCJzaWRlYmFyIiwic2hvd01vcmUiLCJmYWNldGVkU2VhcmNoIiwiY29udGVudCIsImh0bWwiLCJ0cmlnZ2VySGFuZGxlciIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJ2YWxpZGF0aW9uRXJyb3JNZXNzYWdlcyIsImRlZmF1bHQiLCJUUkFOU0xBVElPTlMiLCJpc1RyYW5zbGF0aW9uRGljdGlvbmFyeU5vdEVtcHR5IiwiZGljdGlvbmFyeSIsImNob29zZUFjdGl2ZURpY3Rpb25hcnkiLCJwYXJzZSIsInZhbGlkYXRpb25EaWN0aW9uYXJ5SlNPTiIsInZhbGlkYXRpb25GYWxsYmFja0RpY3Rpb25hcnlKU09OIiwidmFsaWRhdGlvbkRlZmF1bHREaWN0aW9uYXJ5SlNPTiIsImFjdGl2ZURpY3Rpb25hcnkiLCJsb2NhbGl6YXRpb25zIiwidHJhbnNsYXRpb25LZXlzIiwic3BsaXQiLCJyZWR1Y2UiLCJhY2MiXSwic291cmNlUm9vdCI6IiJ9